services:
  nginx_frontend:
    container_name: nginx_frontend
    build:
      context: ./srcs/frontend
    expose:
      - "80"
    volumes:
      - webcnt_volume:/var/www/html
    networks:
      - transcendence_net
    restart: always
    depends_on:
      django:
        condition: service_healthy

  nginx:
    container_name: nginx
    build:
      context: ./srcs/backend/nginx
    ports:
      - "8080:8080"
    volumes:
      - ssl_volume:/etc/nginx/ssl
    restart: always
    env_file: srcs/.env
    depends_on:
      - django
      - nginx_frontend
    networks:
      - transcendence_net

  redis:
    container_name: redis
    build:
      context: ./srcs/backend/redis
    restart: on-failure
    networks:
      - transcendence_net
    expose:
      - "6379"
    env_file: srcs/.env
    volumes:
      - redis_volume:/data

  postgres:
    container_name: postgres
    image: bitnami/postgresql:16.2.0-debian-12-r8
    env_file: srcs/.env
    volumes:
      - db_volume:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - transcendence_net
    restart: unless-stopped

  django:
    container_name: django
    build:
      context: ./srcs/backend/django
    env_file: srcs/.env
    depends_on:
      - postgres
      - redis
      - blockchain
    volumes:
      - django_volume:/app
      - blockchain_volume:/blockchain_shared
    ports:
      - "8000:8000"
    networks:
      - transcendence_net
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  blockchain:
    container_name: blockchain
    build:
      context: ./srcs/backend/blockchain
    env_file: srcs/.env
    volumes:
      - blockchain_volume:/app/blockchain_shared
    ports:
      - "8545:8545"
    networks:
      - transcendence_net
    restart: unless-stopped

volumes:
  webcnt_volume:
    name: webcnt_volume
    driver: local
    driver_opts:
      type: none
      device: ./srcs/frontend/src
      o: bind

  db_volume:
    name: db_volume
    driver: local
    driver_opts:
      type: none
      device: ${DATABASE_CONTAINER_PATH}/db_volume
      o: bind

  ssl_volume:
    driver: local
    name: ssl_volume

  redis_volume:
    driver: local
    name: redis_volume

  django_volume:
    name: django_volume
    driver: local
    driver_opts:
      type: none
      device: ./srcs/backend/django/apps
      o: bind

  blockchain_volume:
    driver: local
    name: blockchain_volume

networks:
  transcendence_net:
    name: transcendence_net
    driver: bridge
